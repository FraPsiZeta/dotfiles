" Auto-configuration setup.
" If enabled, VimPlug will be automatically instlled, 
" and all plugins will be installed automagically.
let AUTO_CONFIGURE=1

if AUTO_CONFIGURE
    " Auto install of VimPlug
    "
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif

    call plug#begin('~/.vim/plugged')

    function! BuildYCM(info)
      " info is a dictionary with 3 fields
      " - name:   name of the plugin
      " - status: 'installed', 'updated', or 'unchanged'
      " - force:  set on PlugInstall! or PlugUpdate!
      if a:info.status == 'installed' || a:info.force
        !./install.py --clangd-completer
      endif
    endfunction

    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'arcticicestudio/nord-vim'
    Plug 'vim-airline/vim-airline'
    Plug 'tpope/vim-commentary'
    Plug 'octol/vim-cpp-enhanced-highlight'
    Plug 'michaeljsmith/vim-indent-object'
    Plug 'tpope/vim-repeat'
    Plug 'tpope/vim-surround'
    Plug 'cespare/vim-toml'
    " Plug 'dense-analysis/ale'
    " Plug 'Valloric/YouCompleteMe', { 'do': function('BuildYCM') }

    call plug#end()
endif

" Default:
"
" Configuration file for vim
set modelines=0         " CVE-2007-2438
set nomodeline
set tabpagemax=100

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible        " Use Vim defaults instead of 100% vi compatibility
set backspace=2         " more powerful backspacing

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup

" Settings:
"
"Set terminal windowsize
set termwinsize=15x0
set splitbelow

"True-color terminal
set termguicolors

" set mouse=a
set number relativenumber
set cursorline

"Spaces and tabs configurations
set tabstop=4
set shiftwidth=4
set expandtab

" Some useful functions
function! UseTabs(length)
    let &tabstop=a:length     " Size of a hard tabstop (ts).
    let &shiftwidth=a:length  " Size of an indentation (sw).
    set noexpandtab   " Always uses tabs instead of space characters (noet).
    set autoindent    " Copy indent from current line when starting a new line (ai).
endfunction

function! UseSpaces(length)
    let &tabstop=a:length     " Size of a hard tabstop (ts).
    let &shiftwidth=a:length  " Size of an indentation (sw).
    set expandtab     " Always uses spaces instead of tab characters (et).
    set softtabstop=0 " Number of spaces a <Tab> counts for. When 0, featuer is off (sts).
    set autoindent    " Copy indent from current line when starting a new line.
    set smarttab      " Inserts blanks on a <Tab> key (as per sw, ts and sts).
endfunction

" call UseSpaces(2)

" Sets scrolloff on and off
if !exists('*VCenterCursor')
  augroup VCenterCursor
  au!
  au OptionSet *,*.*
    \ if and( expand("<amatch>")=='scrolloff' ,
    \         exists('#VCenterCursor#WinEnter,WinNew,VimResized') )|
    \   au! VCenterCursor WinEnter,WinNew,VimResized|
    \ endif
  augroup END
  function VCenterCursor()
    if !exists('#VCenterCursor#WinEnter,WinNew,VimResized')
      let s:default_scrolloff=&scrolloff
      let &scrolloff=winheight(win_getid())/2
      au VCenterCursor WinEnter,WinNew,VimResized *,*.*
        \ let &scrolloff=winheight(win_getid())/2
    else
      au! VCenterCursor WinEnter,WinNew,VimResized
      let &scrolloff=s:default_scrolloff
    endif
  endfunction
endif

call VCenterCursor()


"Set tree style as default for exploring folders
let g:netrw_banner = 0
let g:netrw_liststyle=3
let g:netrw_browse_split = 4
let g:netrw_winsize = 17

"Allow to chnage buffer without saving
set hidden

"Infinite recursion for find
set path+=**
set wildignore+=**/venv/**
set wildignore+=**/__pycache__/**
set wildignore+=**/.mypy_cache/**
set wildignore+=**/.svn/**
set wildignore+=**/build/**
set wildignore+=**/dist/**

"Set system clipboard as default
set clipboard^=unnamed,unnamedplus


" Plugins:
"
" Gets all folders inside plugin_path, and adds them to rtp
" let plugin_folders=globpath(plugin_path, '*')
" let plugin_folders=substitute(plugin_folders, '\n', ',', 'g')
" let &runtimepath.="," . plugin_folders
packadd termdebug


" CoC
"
" GoTo code navigation.
nmap <silent> <leader>mgg <Plug>(coc-definition)
nmap <silent> <leader>gy <Plug>(coc-type-definition)
nmap <silent> <leader>gi <Plug>(coc-implementation)
nmap <silent> <leader>gr <Plug>(coc-references)

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Use <c-space>for trigger completion
inoremap <silent><expr> <NUL> coc#refresh()

" Use <tab> for trigger completion and navigate to the next complete item
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

inoremap <silent><expr> <Tab>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()

" Use Tab and S-Tab for scrolling completion list
inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
" Confirm selection with <Enter>
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm() : "\<C-g>u\<CR>"

noremap <leader>ss :CocCommand clangd.switchSourceHeader<Enter>
noremap <leader>gs :CocCommand clangd.symbolInfo<Enter>

" Termdebug settings
nnoremap <leader>dbg <Esc>:Termdebug<Enter><C-W>w<C-W>L<C-W>w<C-W>w


" ALE settings
" let g:ale_enabled = 0
" let g:ale_linters_explicit = 1
" let g:ale_linters={'python': ['mypy', 'flake8']}
" Only run linters named in ale_linters settings.
" For some reason this one prevents ALE to lint new tabs
" let g:ale_fixers=['black']
" let g:ale_python_flake8_options='--ignore=E128,E127,E126,W503,W504,E203,E501,E251'
" let g:ale_python_pylint_options='--disable=C0103,C0111,C0112,C0202,R0913'
" let g:ale_python_mypv_options='-m'
" let g:ale_python_black_options='-l 79'
" let g:ale_fix_on_save=1
" autocmd FileType python :ALEEnable
" map <leader>ad :ALEToggle<CR>


"
" YouCompleteMe settings
set encoding=utf-8

" Enabled by default
" let g:loaded_youcompleteme = 1

" let g:ycm_autoclose_preview_window_after_insertion = 1
" let g:ycm_confirm_extra_conf = 0
" let g:ycm_auto_trigger = 1
" let g:ycm_max_diagnostics_to_display = 0
" let g:ycm_always_populate_location_list = 1
" In order to let Jedi know where the root project is
let $PYTHONPATH=getcwd() . ":" . $PYTHONPATH
let $MYPYPATH=getcwd() . ":" . $MYPYPATH

" map <leader>ac :YcmCompleter FixIt<CR>
" map <leader>gt :YcmCompleter GoTo<CR>
" map <leader>gtd :YcmCompleter GoToDefinition<CR>
" map <leader>ty :YcmCompleter GetType<CR>


" Commentary settings
autocmd FileType cpp setlocal commentstring=//\ %s
autocmd FileType cc setlocal commentstring=//\ %s
autocmd FileType C setlocal commentstring=//\ %s

" General Mappings:
"
map <space> <leader>

" Common
map <leader>., <esc>:wq<Enter>

nnoremap <C-j> :bn<Enter>
nnoremap <C-k> :bp<Enter>
nnoremap <C-l> gt
nnoremap <C-h> gT

inoremap jj <esc>
inoremap fd <esc>

inoremap (<CR> (<CR>)<ESC>O
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

nnoremap ,, ,
nnoremap <leader>l /
nnoremap <leader>f :find 
noremap <leader>e :Vex <Enter>
noremap <leader>cc :bd <Enter>
" Used to toggle scrolloff, keep cursor centered
nnoremap <leader>zz :call VCenterCursor()<CR> 
noremap <leader>vs :vs <Enter>
noremap <leader><left> :vertical resize -5<Enter>
noremap <leader><right> :vertical resize +5<Enter>
noremap <leader><up> :resize +5<Enter>
noremap <leader><down> :resize -5<Enter>


" ThemesAndSyntax:
"
set background=dark
set hlsearch
if AUTO_CONFIGURE
    colorscheme nord
endif

filetype plugin indent on
syntax on

set laststatus=2

"Cpp Syntax highlight options
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
