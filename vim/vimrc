" Variables:
let plugin_path="~/.vim/bundle"

" Default:
"
" Configuration file for vim
set modelines=0         " CVE-2007-2438
set nomodeline
set tabpagemax=100

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible        " Use Vim defaults instead of 100% vi compatibility
set backspace=2         " more powerful backspacing

" Don't write backup file if vim is being called by "crontab -e"
au BufWrite /private/tmp/crontab.* set nowritebackup nobackup
" Don't write backup file if vim is being called by "chpass"
au BufWrite /private/etc/pw.* set nowritebackup nobackup

" Settings:
"
"Set terminal windowsize
set termwinsize=15x0
set splitbelow

"True-color terminal
set termguicolors

" set mouse=a
set number relativenumber
set cursorline

"Spaces and tabs configurations
set tabstop=4
set shiftwidth=4
set expandtab

" Some useful functions
function! UseTabs(length)
    let &tabstop=a:length     " Size of a hard tabstop (ts).
    let &shiftwidth=a:length  " Size of an indentation (sw).
    set noexpandtab   " Always uses tabs instead of space characters (noet).
    set autoindent    " Copy indent from current line when starting a new line (ai).
endfunction

function! UseSpaces(length)
    let &tabstop=a:length     " Size of a hard tabstop (ts).
    let &shiftwidth=a:length  " Size of an indentation (sw).
    set expandtab     " Always uses spaces instead of tab characters (et).
    set softtabstop=0 " Number of spaces a <Tab> counts for. When 0, featuer is off (sts).
    set autoindent    " Copy indent from current line when starting a new line.
    set smarttab      " Inserts blanks on a <Tab> key (as per sw, ts and sts).
endfunction

" call UseSpaces(2)

" Sets scrolloff on and off
if !exists('*VCenterCursor')
  augroup VCenterCursor
  au!
  au OptionSet *,*.*
    \ if and( expand("<amatch>")=='scrolloff' ,
    \         exists('#VCenterCursor#WinEnter,WinNew,VimResized') )|
    \   au! VCenterCursor WinEnter,WinNew,VimResized|
    \ endif
  augroup END
  function VCenterCursor()
    if !exists('#VCenterCursor#WinEnter,WinNew,VimResized')
      let s:default_scrolloff=&scrolloff
      let &scrolloff=winheight(win_getid())/2
      au VCenterCursor WinEnter,WinNew,VimResized *,*.*
        \ let &scrolloff=winheight(win_getid())/2
    else
      au! VCenterCursor WinEnter,WinNew,VimResized
      let &scrolloff=s:default_scrolloff
    endif
  endfunction
endif

call VCenterCursor()



"Set tree style as default for exploring folders
let g:netrw_liststyle=3

"Allow to chnage buffer without saving
set hidden

"Infinite recursion for find
set path+=**

"Set system clipboard as default
set clipboard^=unnamed,unnamedplus


" Plugins:
"
" Gets all folders inside plugin_path, and adds them to rtp
let plugin_folders=globpath(plugin_path, '*')
let plugin_folders=substitute(plugin_folders, '\n', ',', 'g')
let &runtimepath.="," . plugin_folders
packadd termdebug


" ALE settings
let g:ale_enabled = 0
let b:ale_linters=['flake8']
let g:ale_fixers=['black']
let g:ale_python_flake8_options='--ignore=E128,E127,E126,W504,E203,E501,E251'
" Only run linters named in ale_linters settings.
" For some reason this one prevents ALE to lint new tabs
" let g:ale_linters_explicit = 1
autocmd FileType python :ALEEnable
map <leader>cc :ALEToggle<CR>


" Termdebug settings
nnoremap <leader>dbg <Esc>:Termdebug<Enter><C-W>w<C-W>L<C-W>w<C-W>w
"
" YouCompleteMe settings
set encoding=utf-8

let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_auto_trigger = 1
let g:ycm_max_diagnostics_to_display = 0
let g:ycm_always_populate_location_list = 1
" In order to let Jedi know where the root project is
let $PYTHONPATH=getcwd() . ":" . $PYTHONPATH

map <leader>ac :YcmCompleter FixIt<CR>
map <leader>gt :YcmCompleter GoTo<CR>
map <leader>gtd :YcmCompleter GoToDefinition<CR>
map <leader>ty :YcmCompleter GetType<CR>


" Syntastic settings
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 0
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_python_checkers = ['flake8']
" let g:syntastic_python_flake8_args='--ignore=E128,E126,E501,W504'
" let g:syntastic_mode_map = { 'mode': 'passive' }

" Commentary settings
autocmd FileType cpp setlocal commentstring=//\ %s
autocmd FileType cc setlocal commentstring=//\ %s
autocmd FileType C setlocal commentstring=//\ %s

" Mappings:
"
map <space> <leader>

" Common
map <leader>., <esc>:wq<Enter>

nnoremap <C-j> :bn<Enter>
nnoremap <C-k> :bp<Enter>
nnoremap <C-l> gt
nnoremap <C-h> gT

inoremap jj <esc>

inoremap (<CR> (<CR>)<ESC>O
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

nnoremap ,, ,
nnoremap <leader>l /
noremap <leader>dir :30vs .<Enter>
noremap <leader>fs :find %:t:r.
" Used to toggle scrolloff, keep cursor centered
nnoremap <leader>zz :call VCenterCursor()<CR> 


" ThemesAndSyntax:
"
set background=dark
set hlsearch
colorscheme nord

filetype plugin indent on
syntax on

set laststatus=2

"Cpp Syntax highlight options
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
